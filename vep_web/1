#!/usr/bin/env python
"""
Script to interact with Ensemble Variant Effect Predictor(VEP)
webservice
"""
import argparse
from functools import wraps
import json
import os
import requests
import shutil
import sys
import tempfile
import time
import vcf

URL = 'http://grch37.ensembl.org/vep/human/region/{}:{}-{}/{}?content-type=application/json'



def retry(ExceptionToCheck, tries=40000, delay=3, backoff=2, logger=None):
    def deco_retry(f):
        @wraps(f)
        def f_retry(*args, **kwargs):
            mtries, mdelay = tries, delay
            while mtries > 1:
                try:
                    return f(*args, **kwargs)
                except ExceptionToCheck, e:
                    #msg = '%s, Retrying in %d seconds...' % (str(e), mdelay)
                    msg = 'Retrying in %d seconds...' % (mdelay)
                    if logger:
                        logger.warning(msg)
                    else:
                        print msg
                    time.sleep(mdelay)
                    mtries -= 1
                    mdelay *= backoff
            return f(*args, **kwargs)

        return f_retry  # true decorator
class VEPRestClient:

    def __init__(self, input_file):
        self.pending_urls = {}
        vcf_reader = vcf.Reader(open(input_file, 'r'))
        for record in vcf_reader:
            url = URL.format(record.CHROM, record.POS, record.POS, ("").join([str(x) for x in record.ALT]))
            key = "{}:{}-{}-{}".format(record.CHROM, record.POS, record.POS, ("").join([str(x) for x in record.ALT]))
            self.pending_urls[key] = url

    #@retry(requests.exceptions.HTTPError)
    def submit(self):
        for key, url in self.pending_urls.iteritems():
            print url
            request = requests.get('http://grch37.rest.ensembl.org/vep/human/region/9:22125503-22125502/C?content-type=application/json')
            time_delay = None
            try:
                retry_delay = request.headers['Retry-After']
                time_delay = retry_delay
            except KeyError:
                pass
            if time_delay:
                time.sleep(time_delay)
                request = requests.get(url)
            response = request.text#json()
            print response
            break






if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_file", type=str, required=True, help="Input file location")
    #parser.add_argument("--specie", type=str, required=True, help="Specie")
    args = parser.parse_args(sys.argv[1:])
    vep = VEPRestClient(args.input_file)
    vep.submit()

